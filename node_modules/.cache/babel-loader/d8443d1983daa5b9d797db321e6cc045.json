{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nconst useFetch = url => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchResources = async () => {\n      try {\n        let res = await fetch(url);\n        let datos = await res.json();\n        setData(datos);\n        setLoading(false);\n      } catch (error) {\n        setLoading(false);\n        setError(error);\n      }\n    };\n\n    fetchResources();\n  }, [url]);\n  return {\n    data,\n    loading,\n    error\n  };\n};\n\nexport default useFetch;","map":{"version":3,"sources":["/home/jeexe/mi_web/src/hooks/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","loading","setLoading","error","setError","fetchResources","res","fetch","datos","json"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;AAEA,MAAMC,QAAQ,GAAGC,GAAG,IAAI;AAEpB,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBL,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAM,CAACM,OAAD,EAASC,UAAT,IAAuBP,QAAQ,CAAC,IAAD,CAArC;AACA,QAAM,CAACQ,KAAD,EAAOC,QAAP,IAAmBT,QAAQ,CAAC,IAAD,CAAjC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAMS,cAAc,GAAG,YAAY;AAE/B,UAAG;AACC,YAAIC,GAAG,GAAG,MAAMC,KAAK,CAACT,GAAD,CAArB;AACA,YAAIU,KAAK,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAlB;AAEAT,QAAAA,OAAO,CAACQ,KAAD,CAAP;AACAN,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OAND,CAOA,OAAOC,KAAP,EAAa;AAETD,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACH;AAEJ,KAfD;;AAgBAE,IAAAA,cAAc;AAEjB,GApBQ,EAoBN,CAACP,GAAD,CApBM,CAAT;AAsBA,SAAO;AAACC,IAAAA,IAAD;AAAME,IAAAA,OAAN;AAAcE,IAAAA;AAAd,GAAP;AAEH,CA9BD;;AAgCA,eAAeN,QAAf","sourcesContent":["import {useState, useEffect} from 'react'\n\nconst useFetch = url => {\n\n    const [data,setData] = useState([]);\n    const [loading,setLoading] = useState(true);\n    const [error,setError] = useState(null);\n\n    useEffect(() => {\n        \n        const fetchResources = async () => {\n\n            try{\n                let res = await fetch(url)\n                let datos = await res.json();\n\n                setData(datos)\n                setLoading(false)\n            }\n            catch (error){\n\n                setLoading(false)\n                setError(error)\n            }\n            \n        } \n        fetchResources();\n    \n    }, [url])\n\n    return {data,loading,error}\n\n}\n\nexport default useFetch\n"]},"metadata":{},"sourceType":"module"}